buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
    }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eu.appsatori.fatjar'


repositories {
    jcenter()
}

test {
    testLogging {
        // Show that tests are run in the command-line output
        events 'started'
    }
}

fatJar {
    manifest {
        attributes 'Main-Class': 'io.crate.frameworks.mesos.Main',
        'Implementation-Title': 'Crate-Mesos'
    }
}

fatJarPrepareFiles {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

dependencies {
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.16'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.16'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    compile 'org.apache.mesos:mesos:0.21.1'
    compile 'com.google.guava:guava:18.0'
    testCompile 'junit:junit:4.11'
    testCompile ("org.mockito:mockito-core:1.10.8") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
}

def jvmTestFlags = ['-ea']

idea {
    workspace {
        iws.withXml { xmlFile ->
            def runManager = xmlFile.asNode().component.find { it.@name == 'RunManager' }

            // enable assertions for junit tests
            def junitDefaults = runManager.configuration.find { it.@default == 'true' && it.@type == 'JUnit' }
            junitDefaults.option.find { it.@name == 'VM_PARAMETERS' }.replaceNode {
                option(name: 'VM_PARAMETERS', value: jvmTestFlags.join(' '))
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}
